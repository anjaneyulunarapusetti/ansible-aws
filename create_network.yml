- name: " create vpc "
  hosts: localhost 
  gather_facts: False  # don't gather facts against localhost

  vars : 
    vpc_title: 'ansible'
    vpc_name: "{{ vpc_title }} VPC"
    igw_name: "{{ vpc_title }} IGW"
    subnet_name_1: "{{ vpc_title }} Subnet"
    subnet_name_2: "{{ vpc_title }} Subnet"
    acl_name: "{{ vpc_title }} ACL"
    route_table_name: "{{ vpc_title }} route table"
    vpcCidrBlock: '10.0.0.0/16'
    destinationCidrBlock: '0.0.0.0/0'
    subNetCidrBlock_1: '10.0.1.0/24'
    subNetCidrBlock_2: '10.0.2.0/24'
    state : "present"
    zone: 'us-east-1a'
    region: 'us-east-1'

  tasks:
   - name: create a new ec2 VPC
    # create a vpc with name, cidr block,dns support, and tenancy
     ec2_vpc_net:
       name: "{{ vpc_name }}" 
       cidr_block: "{{ vpcCidrBlock }}"
       region: "{{ region }}"
       # enable dns support 
       dns_support: yes
       # enable dns hostnames
       dns_hostnames: yes
       tenancy: default
       state: "{{ state }}"
     register: ec2_vpc_net_result

   - name: create ec2 vpc internet gateway       
    # create an internet gateway for the vpc
     ec2_vpc_igw:
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      state: "{{ state }}" 
      tags:
        Name: "{{ igw_name }}"
     register: igw_result


   - name: create ec2 vpc subnet - 1 
    # create the subnet for the vpc with a cidr block
     ec2_vpc_subnet:
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      az: "{{ zone }}"      # az is the availability zone
      state: "{{ state }}"
      cidr: "{{ subNetCidrBlock_1 }}"
      # enable public ip
      map_public: yes
      resource_tags:
        Name: "{{ subnet_name_1 }}"
     register: subnet_result_1

   - name: create ec2 vpc subnet - 2
    # create the subnet for the vpc with a cidr block
     ec2_vpc_subnet:
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      az: "{{ zone }}"      # az is the availability zone
      state: "{{ state }}"
      cidr: "{{ subNetCidrBlock_2 }}"
      # enable public ip
      map_public: yes
      resource_tags:
        Name: "{{ subnet_name_2 }}"
     register: subnet_result_2

    # print out new subnet id and security group
   - debug:
      msg: "To use the new created VPC: {{ vpc_name }};  and to create your AWS instances " 
